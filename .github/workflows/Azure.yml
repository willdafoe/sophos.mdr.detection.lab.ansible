name: Azure

on:
  workflow_dispatch:
    inputs:
      deployment_name:
        type: choice
        description: | 
          (Required) Which lab Environment to run.
        options:
          - microsoft_defender
        required: true
        default: microsoft_defender
      environment:
        type: choice
        description: | 
          (Optional) GitHub deployment environment. This sets the default values for the namespace and stage labels used in the naming convention contexts with the Terraform Modules.
        options:
          - prod
          - dev
          - qa
          - test
        required: true
        default: prod
      name:
        type: string
        description: |
          (Optional) A name label to attach to the deployed lab. Used in the label context for the naming convention of the provisioned resources.
        required: false
      admin_username:
        type: string
        description: |
          (Required) A supplied username to use for provisioning the virtual machines in the lab environment.
        required: true
      admin_password:
        type: string
        description: |
          (Required) A supplied password to use for provisioning the virtual machines in the lab environment.
        required: true
      trusted_ip:
        type: string
        description: |
          (Optional) Your local public IP address. This value is used in the Security Group rule definitions and will allow remote access from your system to the remote virtual machine environment. Must be supplied in CIDR notation. EG:  'X.X.X.X/32'
        required: false
      domain_controller_count:
        type: number
        description: |
          (Optional) The number of Domain Controllers to provision. The default value is `1`. 
        required: false
        default: 1
      windows_server_count:
        type: number
        description: |
          (Optional) The number of Windows Servers to provision. The default value is `0`
        default: 0
      windows_client_count:
        type: number
        description: |
          (Optional) The number of Windows Clients to provision. The default value is `1`.
        default: 1
      location:
        type: choice
        description: |
          (Required) The Azure region to deploy the Lab environment to.
        options:
          - centralus
          - eastus
          - eastus2
          - southcentralus
          - westcentralus
          - westus
          - westus2
        required: true
        default: southcentralus
permissions:
  id-token: write
  contents: read

env:
  microsoft_defender: willdafoe/terraform-azure-microsoft_defender

jobs:
  which_lab:
    runs-on: ubuntu-latest
    outputs:
      project_path: ${{ steps.setvars.outputs.project_path }}
      repo_uri: ${{ steps.setvars.outputs.repo_uri }}
    steps:
      - name: Hide sensitive inputs
        uses: levibostian/action-hide-sensitive-inputs@v1    
        with:
          exclude_inputs: deployment_name, environment, name, admin_username, trusted_ip, domain_controller_count, windows_server_count,windows_client_count, location
      - id: setvars
        run: |
          if [ "${{ github.event.inputs.deployment_name }}" == "microsoft_defender" ]; then
            echo "project_path=${{ github.workspace }}/workspace/${{ github.event.inputs.deployment_name }}" >> $GITHUB_OUTPUT
            echo "repo_uri=${{ env.microsoft_defender }}" >> $GITHUB_OUTPUT
          fi
      - id: runner_ip
        run: |
          RUNNER_IP=$(curl https://api.ipify.org)/32
          if [ "$RUNNER_IP" ]; then
            echo "runner_ip=${RUNNER_IP}" >>$GITHUB_OUTPUT
          fi       

  deploy:
    runs-on: ubuntu-latest
    needs: which_lab
    environment:
      name: ${{ github.event.inputs.environment }}
      url: "https://github.com"
    env:
      repo_uri: ${{ needs.which_lab.outputs.repo_uri }}
      project_path: ${{ needs.which_lab.outputs.project_path }}
      name: ${{ github.event.inputs.name }}
      namespace: $GITHUB_ENV
      location: ${{ github.event.inputs.location }}
      environment: ${{ github.event.inputs.environment }}
      stage: $GITHUB_ENV
      admin_username: ${{ github.event.inputs.admin_username }}
      admin_password: ${{ github.event.inputs.admin_password }}
      trusted_ip: ${{ github.event.inputs.trusted_ip }}
      runner_ip: ${{ needs.which_lab.outputs.runner_ip }}
    steps:
      - name: Checking out ${{ github.repository }}
        id: checkout
        uses: actions/checkout@v3
      - name: Checking out repository for ${{ github.event.inputs.deployment_name }}
        id: workspace_checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ env.repo_uri }}
          path: ${{ env.project_path }}
          ssh-key: ${{ secrets.DEPLOY_KEY }}        
      - name: Login to Azure
        id: az_logon
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Setting up Terraform
        id: tf_setup
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        
      - name: Generate configuration template
        id: config
        uses: cuchi/jinja2-action@v1.2.0
        with:
          template: ${{ env.project_path }}/templates/config.yml.j2
          output_file: ${{ env.project_path }}/config/config.yml
          variables: |
            domain_controller_count=${{ github.event.inputs.domain_controller_count }}
            windows_server_count=${{ github.event.inputs.windows_server_count }}
            windows_client_count=${{ github.event.inputs.windows_client_count }} 
      - name: Running Terraform init
        id: init
        working-directory: ${{ env.project_path }}    
        shell: bash
        run: |
          terraform init
      - name: Running Terraform Plan
        id: plan
        continue-on-error: true
        working-directory: ${{ env.project_path }}
        shell: bash
        run: |
          terraform plan -input=false -no-color -out=terraform.plan \
          && terraform show -no-color terraform.plan
        env:
          TF_VAR_name: ${{ env.name }}
          TF_VAR_namespace: ${{ secrets.NAMESPACE }}
          TF_VAR_environment: ${{ env.environment }}
          TF_VAR_stage: ${{ secrets.STAGE }}
          TF_VAR_location: ${{ env.location }}
          TF_VAR_admin_username: ${{ env.admin_username }}
          TF_VAR_admin_password: ${{ env.admin_password }}
          TF_VAR_trusted_ips: '["${{ env.trusted_ip }}" , "${{ needs.which_lab.outputs.runner_ip }}"]'
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt 
      - name: Put Plan in GITHUB_ENV environment variable
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV 
      - name: Plan Failure
        if: steps.plan.outcome == 'failure'
        run: |
          echo '${{ steps.plan.outputs.stderr }}'


